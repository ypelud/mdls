class PaginationLinkRenderer < WillPaginate::ViewHelpers::LinkRenderer

  def to_html
    links = [] ; #@options[:page_links] ? windowed_links : []
    pagenumber = @collection.current_page.to_s + ' ' + I18n.t(:sur) + ' ' + @collection.total_pages.to_s;

    links.unshift(page_link_or_span(@collection.previous_page, 'prevnext', I18n.t(:precedent))) if @collection.previous_page
    links.push(page_link_or_span(@collection.current_page, 'pagenumber', pagenumber))    
    links.push(page_link_or_span(@collection.next_page, 'prevnext', I18n.t(:suivant))) if @collection.next_page

    html = links.join(@options[:separator])
    @options[:container] ? @template.content_tag(:ul, html, html_attributes) : html
  end

protected

  def windowed_links
    visible_page_numbers.map { page_link_or_span(n, (n == @collection.current_page ? 'current' : nil)) }
  end

  def page_link_or_span(page, span_class, text = nil)
    #text ||= page.to_s
    if text && page && page != @collection.current_page
      page_link(page, text, :class => span_class)
    else
      page_span(page, text, :class => span_class)
    end
  end

  def page_link(page, text, attributes = {})
    @template.content_tag(:li, @template.link_to(text, url_for(page)), attributes)
  end

  def page_span(page, text, attributes = {})
    @template.content_tag(:li, text, attributes)
  end

end